# Test description:
#   This test checks the UDP functionality by creating 4 routers, 2 edges and 2 cloud.
#   The cloud router will forward every message from 1 to 2 by two different participants connected by UDP.
#   It also probes the Initial Peers functionality, avoiding the discovery of edge routers with those routers that
#    that are not the one suppose to connect with.
#
# Test architecture:
#
#          ┌────────────────────────────────────────────────────────────────┐
#          │ cloud_edge_net                                                 │
#          │                                                                │
#          │ ┌──────────────────┐                       ┌──────────────────┐│
#          │ │ ddsproxy_cloud_1│───────────────────────│ ddsproxy_cloud_2││
#          │ │ (wan + wan)      │                       │ (wan + wan)      ││
#          │ └────────────────▲─┘                       └─▲────────────────┘│
#          │                  │                           │                 │
#          │           ┌──────┘                           └────┐            │
#   ┌──────┼───────────┼──────────────────┐        ┌───────────┼────────────┼──────┐
#   │      │           │                  │        │           │            │      │
#   │      │ ┌─────────▼────────┐         │        │   ┌───────▼──────────┐ │      │
#   │      │ │ ddsproxy_edge_1 │         │        │   │ ddsproxy_edge_2 │ │      │
#   │      │ │ (local + wan)    │         │        │   │ (local + wan)    │ │      │
#   │      │ └───────┬────▲─────┘         │        │   └───────┬──────────┘ │      │
#   │      │         │    │               │        │           │            │      │
#   │      └─────────┼────┼───────────────┼────────┼───────────┼────────────┘      │
#   │                │    │               │        │           │                   │
#   │  ┌─────────────▼┐  ┌┴───────────┐   │        │    ┌──────▼───────┐           │
#   │  │ sub_edge_1   │  │ pub_edge_1 │   │        │    │ sub_edge_2   │           │
#   │  │ (subscriber) │  │ (publisher)│   │        │    │ (subscriber) │           │
#   │  └──────────────┘  └────────────┘   │        │    └──────────────┘           │
#   │                                     │        │                               │
#   │ edge_1_net (domain 1)               │        │         edge_2_net (domain 2) │
#   └─────────────────────────────────────┘        └───────────────────────────────┘

services:

  ddsproxy_cloud_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_cloud_1
    networks:
      - cloud_edge_net
    volumes:
      - ./ddsproxy_cloud_1.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  ddsproxy_cloud_2:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_cloud_2
    depends_on:
      - ddsproxy_cloud_1
    networks:
      - cloud_edge_net
    volumes:
      - ./ddsproxy_cloud_2.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  ddsproxy_edge_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_edge_1
    depends_on:
      - ddsproxy_cloud_1
    networks:
      - cloud_edge_net
      - edge_1_net
    volumes:
      - ./ddsproxy_edge_1.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  pub_edge_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: pub_edge_1
    depends_on:
      - ddsproxy_edge_1
    networks:
      - edge_1_net
    command: install/BasicConfigurationExample/examples/cpp/dds/BasicConfigurationExample/BasicConfigurationExample publisher -i 100 -s 110 -d 1

  sub_edge_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: sub_edge_1
    depends_on:
      - ddsproxy_edge_1
    networks:
      - edge_1_net
    volumes:
      - ../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_subscriber.py --exe install/BasicConfigurationExample/examples/cpp/dds/BasicConfigurationExample/BasicConfigurationExample --samples 20 --timeout 12 --args "--domain 1 --samples 20"

  ddsproxy_edge_2:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_edge_2
    depends_on:
      - ddsproxy_cloud_2
    networks:
      - cloud_edge_net
      - edge_2_net
    volumes:
      - ./ddsproxy_edge_2.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  sub_edge_2:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: sub_edge_2
    depends_on:
      - ddsproxy_edge_2
    networks:
      - edge_2_net
    volumes:
      - ../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_subscriber.py --exe install/BasicConfigurationExample/examples/cpp/dds/BasicConfigurationExample/BasicConfigurationExample --samples 20 --timeout 12 --args "--domain 2 --samples 20"

networks:
  edge_1_net:
  edge_2_net:
  cloud_edge_net:
  default:
    driver: none
