# Test description:
#   This test checks the repeater functionality of the DDS Router. A DDS Router is deployed in the cloud with a single
#   repeater participant, and we verify that the data sent from network 1 reaches network 2.
#
# Test architecture:
#
#          ┌────────────────────────────────┐  ┌────────────────────────────┐
#          │ cloud_edge_1_net               │  │           cloud_edge_2_net │
#          │                                │  │                            │
#          │                        ┌───────┴──┴───────┐                    │
#          │                        │ ddsproxy_cloud  │                    │
#          │                        │ (wan [repeater]) │                    │
#          │                        └─▲──────┬──┬──────┘                    │
#          │                          │      │  │    │                      │
#          │           ┌──────────────┘      │  │    └─────────┐            │
#   ┌──────┼───────────┼──────────────────┐  │  │  ┌───────────┼────────────┼──────┐
#   │      │           │                  │  │  │  │           │            │      │
#   │      │ ┌──────────────────┐         │  │  │  │   ┌───────▼──────────┐ │      │
#   │      │ │ ddsproxy_edge_1 │         │  │  │  │   │ ddsproxy_edge_2 │ │      │
#   │      │ │ (local + wan)    │         │  │  │  │   │ (local + wan)    │ │      │
#   │      │ └────────────▲─────┘         │  │  │  │   └───────┬──────────┘ │      │
#   │      │              │               │  │  │  │           │            │      │
#   │      └──────────────┼───────────────┼──┘  └──┼───────────┼────────────┘      │
#   │                     │               │        │           │                   │
#   │                    ┌┴───────────┐   │        │    ┌──────▼───────┐           │
#   │                    │ pub_edge_1 │   │        │    │ sub_edge_2   │           │
#   │                    │ (publisher)│   │        │    │ (subscriber) │           │
#   │                    └────────────┘   │        │    └──────────────┘           │
#   │                                     │        │                               │
#   │ edge_1_net                          │        │                    edge_2_net │
#   └─────────────────────────────────────┘        └───────────────────────────────┘

services:

  ddsproxy_cloud:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_cloud
    networks:
      cloud_edge_1_net:
        aliases:
            - ddsproxy_cloud.edge_1
      cloud_edge_2_net:
        aliases:
            - ddsproxy_cloud.edge_2
    volumes:
      - ./ddsproxy_cloud.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  ddsproxy_edge_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_edge_1
    depends_on:
      - ddsproxy_cloud
    networks:
      - cloud_edge_1_net
      - edge_1_net
    volumes:
      - ./ddsproxy_edge_1.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  pub_edge_1:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: pub_edge_1
    networks:
      - edge_1_net
    command: install/BasicConfigurationExample/examples/cpp/dds/BasicConfigurationExample/BasicConfigurationExample publisher -i 100 -s 110

  ddsproxy_edge_2:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: ddsproxy_edge_2
    depends_on:
      - ddsproxy_cloud
    networks:
      - cloud_edge_2_net
      - edge_2_net
    volumes:
      - ./ddsproxy_edge_2.yaml:/config.yaml
    command: ddsproxy -c /config.yaml --timeout 12

  sub_edge_2:
    image: ${DDSPROXY_COMPOSE_TEST_DOCKER_IMAGE}
    container_name: sub_edge_2
    networks:
      - edge_2_net
    volumes:
      - ../../../scripts:/scripts
    command: python3 /scripts/execute_and_validate_subscriber.py --exe install/BasicConfigurationExample/examples/cpp/dds/BasicConfigurationExample/BasicConfigurationExample --samples 20 --timeout 12 --args "--samples 20"

networks:
  edge_1_net:
  edge_2_net:
  cloud_edge_1_net:
  cloud_edge_2_net:
  default:
    driver: none
